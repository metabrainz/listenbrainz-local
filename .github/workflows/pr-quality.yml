name: PR Quality Check

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  quality-check:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
        pip install -r requirements-test.txt
        # Install additional tools for quality checks
        pip install black isort mypy bandit[toml] types-requests

    - name: Check code formatting with Black
      run: |
<<<<<<< HEAD
=======
        pip install black
>>>>>>> test-ci
        black --check --diff lb_local/ tests/ || echo "‚ö†Ô∏è Code formatting issues found (not blocking)"

    - name: Check import sorting with isort
      run: |
<<<<<<< HEAD
=======
        pip install isort
>>>>>>> test-ci
        isort --check-only --diff lb_local/ tests/ || echo "‚ö†Ô∏è Import sorting issues found (not blocking)"

    - name: Run security check with bandit
      run: |
        bandit -r lb_local/ -f json -o bandit-report.json || echo "‚ö†Ô∏è Security issues found (advisory)"

    - name: Run type checking with mypy
      run: |
        mypy lb_local/ --ignore-missing-imports --no-strict-optional || echo "‚ö†Ô∏è Type checking issues found (advisory)"

    - name: Check for common issues
      run: |
        echo "üîç Checking for common issues..."
        
        # Check for TODO/FIXME comments
        echo "üìù TODO/FIXME comments found:"
        grep -r "TODO\|FIXME" lb_local/ tests/ || echo "None found"
        
        # Check for print statements (should use logging)
        echo "üñ®Ô∏è  Print statements found (consider using logging):"
        grep -r "print(" lb_local/ || echo "None found"
        
        # Check for hardcoded secrets/passwords
        echo "üîê Checking for potential hardcoded secrets:"
        grep -ri "password\|secret\|key" lb_local/ --include="*.py" | grep -v "# noqa" || echo "None found"

    - name: Run fast test suite
      run: |
        python -m pytest tests/test_framework_validation.py -v --no-cov

    - name: Check test coverage requirements
      run: |
<<<<<<< HEAD
        python run_tests.py --cov=lb_local --cov-report=term --cov-fail-under=70 || echo "‚ö†Ô∏è Coverage below 70% (advisory for now)"
=======
        python -m pytest --cov=lb_local --cov-report=term --cov-fail-under=70
>>>>>>> test-ci

    - name: Validate documentation
      run: |
        echo "üìö Checking documentation completeness..."
        
        # Check if new endpoints have documentation
        if git diff --name-only origin/main...HEAD | grep -q "lb_local/view/"; then
          echo "‚úÖ View files changed - ensure endpoints are documented in TESTING.md"
        fi
        
        # Check for README updates if significant changes
        if [[ $(git diff --stat origin/main...HEAD | tail -n1 | grep -o '[0-9]\+' | head -n1) -gt 50 ]]; then
          echo "üìù Large changeset detected - consider updating README.md"
        fi

    - name: Performance check
      run: |
        echo "‚ö° Running performance checks..."
        time python -m pytest tests/test_framework_validation.py > /dev/null
        echo "‚úÖ Test suite performance check completed"
